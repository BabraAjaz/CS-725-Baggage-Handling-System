/* Copyright (c)2020 Rockwell Automation. All rights reserved. */
package fb.rt.cs725;
import fb.datatype.*;
import fb.rt.*;
import fb.rt.events.*;
/** FUNCTION_BLOCK ThreeConCtl
  * @author JHC
  * @version 20201027/JHC
  */
public class ThreeConCtl extends FBInstance
{
/** VAR Candidate */
  public BOOL Candidate = new BOOL();
/** VAR Block */
  public BOOL Block = new BOOL();
/** VAR PE */
  public BOOL PE = new BOOL();
/** VAR PE13 */
  public BOOL PE13 = new BOOL();
/** VAR TokenIn */
  public BOOL TokenIn = new BOOL();
/** VAR PE_14 */
  public BOOL PE_14 = new BOOL();
/** VAR PE_8 */
  public BOOL PE_8 = new BOOL();
/** VAR Multi_ID */
  public INT Multi_ID = new INT();
/** VAR Multi_Time_In */
  public INT Multi_Time_In = new INT();
/** VAR Access_Req */
  public BOOL Access_Req = new BOOL();
/** VAR MotoRotate1 */
  public BOOL MotoRotate1 = new BOOL();
/** VAR MotoRotate2 */
  public BOOL MotoRotate2 = new BOOL();
/** VAR MotoRotate3 */
  public BOOL MotoRotate3 = new BOOL();
/** VAR BlockCon */
  public BOOL BlockCon = new BOOL();
/** VAR Token */
  public BOOL Token = new BOOL();
/** VAR Multi_ID_Out */
  public INT Multi_ID_Out = new INT();
/** VAR Multi_Time_Out */
  public INT Multi_Time_Out = new INT();
/** VAR Access_Req_Out */
  public BOOL Access_Req_Out = new BOOL();
/** Initialization Request */
 public EventOutput INIT = new EventOutput();
/** Normal Execution Request */
 public EventOutput REQ = new EventOutput();
/** EVENT TokenUpdateIn */
 public EventOutput TokenUpdateIn = new EventOutput();
/** EVENT MULTI_IN */
 public EventOutput MULTI_IN = new EventOutput();
/** Initialization Confirm */
 public EventOutput INITO = new EventOutput();
/** Execution Confirmation */
 public EventOutput CNF = new EventOutput();
/** EVENT START */
 public EventOutput START = new EventOutput();
/** EVENT STOP */
 public EventOutput STOP = new EventOutput();
/** EVENT TokenUpdate */
 public EventOutput TokenUpdate = new EventOutput();
/** EVENT MULTI_OUT */
 public EventOutput MULTI_OUT = new EventOutput();
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
*/
  public EventServer eiNamed(String s){
    if("INIT".equals(s)) return INIT;
    if("REQ".equals(s)) return REQ;
    if("TokenUpdateIn".equals(s)) return TokenUpdateIn;
    if("MULTI_IN".equals(s)) return MULTI_IN;
    return super.eiNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
*/
  public EventOutput eoNamed(String s){
    if("INITO".equals(s)) return INITO;
    if("CNF".equals(s)) return CNF;
    if("START".equals(s)) return START;
    if("STOP".equals(s)) return STOP;
    if("TokenUpdate".equals(s)) return TokenUpdate;
    if("MULTI_OUT".equals(s)) return MULTI_OUT;
    return super.eoNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
* @throws FBRManagementException {@inheritDoc}
*/
  public ANY ivNamed(String s) throws FBRManagementException{
    if("Candidate".equals(s)) return Candidate;
    if("Block".equals(s)) return Block;
    if("PE".equals(s)) return PE;
    if("PE13".equals(s)) return PE13;
    if("TokenIn".equals(s)) return TokenIn;
    if("PE_14".equals(s)) return PE_14;
    if("PE_8".equals(s)) return PE_8;
    if("Multi_ID".equals(s)) return Multi_ID;
    if("Multi_Time_In".equals(s)) return Multi_Time_In;
    if("Access_Req".equals(s)) return Access_Req;
    return super.ivNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
* @throws FBRManagementException {@inheritDoc}
*/
  public ANY ovNamed(String s) throws FBRManagementException{
    if("MotoRotate1".equals(s)) return MotoRotate1;
    if("MotoRotate2".equals(s)) return MotoRotate2;
    if("MotoRotate3".equals(s)) return MotoRotate3;
    if("BlockCon".equals(s)) return BlockCon;
    if("Token".equals(s)) return Token;
    if("Multi_ID_Out".equals(s)) return Multi_ID_Out;
    if("Multi_Time_Out".equals(s)) return Multi_Time_Out;
    if("Access_Req_Out".equals(s)) return Access_Req_Out;
    return super.ovNamed(s);}
/** {@inheritDoc}
* @param ivName {@inheritDoc}
* @param newIV {@inheritDoc}
* @throws FBRManagementException {@inheritDoc} */
  public void connectIV(String ivName, ANY newIV)
    throws FBRManagementException{
    if("Candidate".equals(ivName)) connect_Candidate((BOOL)newIV);
    else if("Block".equals(ivName)) connect_Block((BOOL)newIV);
    else if("PE".equals(ivName)) connect_PE((BOOL)newIV);
    else if("PE13".equals(ivName)) connect_PE13((BOOL)newIV);
    else if("TokenIn".equals(ivName)) connect_TokenIn((BOOL)newIV);
    else if("PE_14".equals(ivName)) connect_PE_14((BOOL)newIV);
    else if("PE_8".equals(ivName)) connect_PE_8((BOOL)newIV);
    else if("Multi_ID".equals(ivName)) connect_Multi_ID((INT)newIV);
    else if("Multi_Time_In".equals(ivName)) connect_Multi_Time_In((INT)newIV);
    else if("Access_Req".equals(ivName)) connect_Access_Req((BOOL)newIV);
    else super.connectIV(ivName, newIV);
    }
/** Connect the given variable to the input variable Candidate
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_Candidate(BOOL newIV) throws FBRManagementException{
    Candidate = newIV;
    Con7.connectIVNoException("Candidate",Candidate);
    }
/** Connect the given variable to the input variable Block
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_Block(BOOL newIV) throws FBRManagementException{
    Block = newIV;
    Con7.connectIVNoException("Block",Block);
    }
/** Connect the given variable to the input variable PE
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_PE(BOOL newIV) throws FBRManagementException{
    PE = newIV;
    Con7.connectIVNoException("PE",PE);
    }
/** Connect the given variable to the input variable PE13
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_PE13(BOOL newIV) throws FBRManagementException{
    PE13 = newIV;
    Con7.connectIVNoException("PE13",PE13);
    }
/** Connect the given variable to the input variable TokenIn
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_TokenIn(BOOL newIV) throws FBRManagementException{
    TokenIn = newIV;
    Con7.connectIVNoException("TokenIN",TokenIn);
    }
/** Connect the given variable to the input variable PE_14
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_PE_14(BOOL newIV) throws FBRManagementException{
    PE_14 = newIV;
    FC12.connectIVNoException("PE_14",PE_14);
    }
/** Connect the given variable to the input variable PE_8
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_PE_8(BOOL newIV) throws FBRManagementException{
    PE_8 = newIV;
    FC12.connectIVNoException("PE",PE_8);
    }
/** Connect the given variable to the input variable Multi_ID
  * @param newIV The variable to connect
 */
  public void connect_Multi_ID(INT newIV){
    Multi_ID = newIV;
    }
/** Connect the given variable to the input variable Multi_Time_In
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_Multi_Time_In(INT newIV) throws FBRManagementException{
    Multi_Time_In = newIV;
    FC12.connectIVNoException("Multi_Time_In",Multi_Time_In);
    }
/** Connect the given variable to the input variable Access_Req
  * @param newIV The variable to connect
  * @throws FBRManagementException An internal connection failed.
 */
  public void connect_Access_Req(BOOL newIV) throws FBRManagementException{
    Access_Req = newIV;
    FC12.connectIVNoException("Access_Req",Access_Req);
    }
/** FB Con7 */
  protected RingTokenHasnotCTL Con7 = new RingTokenHasnotCTL() ;
/** FB FC12 */
  protected ConveyorCTLMulticast FC12 = new ConveyorCTLMulticast() ;
/** FB FC13 */
  protected ConveyorCTL FC13 = new ConveyorCTL() ;
/** The default constructor. */
public ThreeConCtl(){
    super();
    INIT.connectTo(Con7.INIT);
    REQ.connectTo(Con7.REQ);
    Con7.INITO.connectTo(FC12.INIT);
    FC12.INITO.connectTo(FC13.INIT);
    FC13.INITO.connectTo(INITO);
    FC13.CNF.connectTo(CNF);
    REQ.connectTo(FC12.REQ);
    REQ.connectTo(FC13.REQ);
    Con7.CNF.connectTo(CNF);
    FC12.CNF.connectTo(CNF);
    TokenUpdateIn.connectTo(Con7.TokenUpdateIN);
    Con7.TokenUpdate.connectTo(TokenUpdate);
    MULTI_IN.connectTo(FC12.MULTI_IN);
    FC12.MULTI_OUT.connectTo(MULTI_OUT);
    FC13.START.connectTo(FC12.CAS_START);
    FC13.STOP.connectTo(FC12.CAS_STOP);
    FC12.START.connectTo(Con7.CAS_START);
    FC12.STOP.connectTo(Con7.CAS_STOP);
    Con7.STOP.connectTo(STOP);
    Con7.START.connectTo(START);
    MotoRotate3 = (BOOL)FC13.ovNamedNoException("MotoRotate");
    MotoRotate2 = (BOOL)FC12.ovNamedNoException("MotoRotate");
    MotoRotate1 = (BOOL)Con7.ovNamedNoException("MotoRotate");
    Con7.connectIVNoException("PE",PE);
    Con7.connectIVNoException("Block",Block);
    BlockCon = (BOOL)Con7.ovNamedNoException("BlockCon");
    Con7.connectIVNoException("Candidate",Candidate);
    Con7.connectIVNoException("PE13",PE13);
    Con7.connectIVNoException("TokenIN",TokenIn);
    Token = (BOOL)Con7.ovNamedNoException("Token");
    FC12.connectIVNoException("PE",PE_8);
    Multi_ID_Out = (INT)FC12.ovNamedNoException("Multi_ID_Out");
    Multi_Time_Out = (INT)FC12.ovNamedNoException("Multi_Time_Out");
    Access_Req_Out = (BOOL)FC12.ovNamedNoException("Access_Req_Out");
    FC12.connectIVNoException("PE_14",PE_14);
    FC12.connectIVNoException("Multi_Time_In",Multi_Time_In);
    FC12.connectIVNoException("Access_Req",Access_Req);
    FC12.Block.initializeNoException("0");
    FC12.Candidate.initializeNoException("0");
    FC12.Multi_ID.initializeNoException("0");
    FC13.PE.initializeNoException("0");
    FC13.Block.initializeNoException("0");
    FC13.Candidate.initializeNoException("0");
  }
/** {@inheritDoc}
 * @param fbName {@inheritDoc}
 * @param r {@inheritDoc}
 * @throws FBRManagementException {@inheritDoc} */
  public void initialize(String fbName, Resource r)
  throws FBRManagementException{
    super.initialize(fbName,r);
    Con7.initialize("Con7",r);
    FC12.initialize("FC12",r);
    FC13.initialize("FC13",r);
}
/** Start the FB instances. */
public void start( ){
  Con7.start();
  FC12.start();
  FC13.start();
}
/** Stop the FB instances. */
public void stop( ){
  Con7.stop();
  FC12.stop();
  FC13.stop();
}
}
